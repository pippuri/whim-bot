{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application's resources outside of Lambdas and Api Gateway",
  "Parameters" : {
    "DomainName" : {
      "Type" : "String",
      "Description" : "The DNS name of an existing Amazon Route 53 hosted zone",
      "AllowedPattern" : "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription" : "must be a valid DNS zone name."
    }
  },
  "Mappings" : {
    "RegionMap" : {
        "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint" : "s3-website-us-east-1.amazonaws.com" },
        "us-west-1" : { "S3hostedzoneID" : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com" },
        "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint" : "s3-website-us-west-2.amazonaws.com" },
        "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint" : "s3-website-eu-west-1.amazonaws.com" },
        "ap-southeast-1" : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com" },
        "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD", "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com" },
        "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint" : "s3-website-ap-northeast-1.amazonaws.com" },
        "sa-east-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "websiteendpoint" : "s3-website-sa-east-1.amazonaws.com" }
    }
  },
  "Resources": {
    "IamRoleLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IamPolicyLambda": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "dev-MaaS-lambda",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "*"
              ],
              "Resource": "arn:aws:dynamodb:${region}:*:table/${project}-user-profile-${stage}"
            },
            {
              "Effect": "Allow",
              "Action": [
                "*"
              ],
              "Resource": "arn:aws:dynamodb:${region}:*:table/${project}-user-travel-log-${stage}"
            },
            {
              "Effect": "Allow",
              "Action": [
                "*"
              ],
              "Resource": "arn:aws:dynamodb:${region}:*:table/${project}-user-transaction-history-${stage}"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${region}:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-sync:ListRecords",
                "cognito-sync:UpdateRecords",
                "cognito-identity:GetId",
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
                "cognito-identity:DescribeIdentity"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "iot:CreateThing",
                "iot:UpdateThing",
                "iot:DescribeThing",
                "iot:ListThings",
                "iot:AttachThingPrincipal",
                "iot:DetachThingPrincipal",
                "iot:ListPrincipalThings",
                "iot:AttachPrincipalPolicy",
                "iot:DetachPrincipalPolicy",
                "iot:ListPrincipalPolicies"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "iot:UpdateThingShadow",
                "iot:GetThingShadow",
                "iot:DeleteThingShadow"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IamRoleLambda"
          }
        ]
      }
    },
    "IamRoleCustomAuthorizer": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IamPolicyCustomAuthorizer": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "dev-MaaS-customauthorizer",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${region}:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IamRoleCustomAuthorizer"
          }
        ]
      }
    },
    "DynamoUserProfile": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "${deletionPolicy}",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "identityId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "identityId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "${project}-user-profile-${stage}"
      }
    },
    "DynamoUserRouteHistory": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "${deletionPolicy}",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "identityId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timeEpoch",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "identityId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timeEpoch",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "${project}-user-travel-log-${stage}"
      }
    },
    "DynamoUserTransactionHistory": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "${deletionPolicy}",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "identityId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "transactionId",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "identityId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "transactionId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "${project}-user-transaction-history-${stage}"
      }
    },
    "S3IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "s3.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "S3IamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "Static-MaaS-Bucket",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "S3IamRole"
          }
        ]
      }
    },
    "StaticFilesBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName": { "Ref" : "DomainName" },
        "AccessControl" : "PublicRead",
        "WebsiteConfiguration" : {
          "IndexDocument" : "index.html",
          "ErrorDocument" : "error.html"
        }
      },
      "DeletionPolicy" : "Retain"
    },
    "StaticFilesCDN" : {
      "Type" : "AWS::CloudFront::Distribution",
      "Properties" : {
         "DistributionConfig" : {
           "Comment" : "CloudFront distibution for Static FIles S3 buceket",
            "Origins" : [ {
                "DomainName": {
                  "Fn::Join" : [".", [
                    {"Ref" : "DomainName"},
                    {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]}
                  ]]
                },
                "Id" : "StaticFilesOrigin",
                "CustomOriginConfig" : {
                  "HTTPPort": "80",
                  "HTTPSPort": "443",
                  "OriginProtocolPolicy": "http-only"
                }
            }],
           "Enabled" : "true",
           "DefaultRootObject" : "index.html",
           "Aliases" : [
             { "Ref": "DomainName" }
           ],
            "DefaultCacheBehavior" : {
                "AllowedMethods" : [ "GET", "HEAD" ],
                "Compress": "true",
                "TargetOriginId" : "StaticFilesOrigin",
                "ForwardedValues" : {
                    "QueryString" : "true"
                },
                "ViewerProtocolPolicy" : "allow-all"
            },
            "PriceClass" : "PriceClass_100",
            "ViewerCertificate" : { "CloudFrontDefaultCertificate" : "true" }
         }
      }
    }
  },
  "Outputs": {
    "IamRoleArnLambda": {
      "Description": "ARN of the lambda IAM role",
      "Value": {
        "Fn::GetAtt": [
          "IamRoleLambda",
          "Arn"
        ]
      }
    },
    "BucketName" : {
      "Value" : { "Ref" : "StaticFilesBucket" },
      "Description" : "Name of S3 bucket to store static files"
    }
  }
}
